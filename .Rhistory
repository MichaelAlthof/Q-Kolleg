plot(pca[[5]], type = "l",
main = paste0("Screeplot, 10% explained by first ", pca[[5]]$idx," PC"))
plot(pca[[5]]$x[,c(1,2)], col =  as.factor(rough_pcode),
main = "PC1 vs PC2 on TF-IDF")
dev.off()
# Hierarchical Ward clustering
png("4_Analysis/Hier_Ward_Visual.png")
par(mfrow = c(1, 2))
plot(group[[5]], hang = -1, cex = .6, xlab = "")
rect.hclust(group[[5]], k = 4, border = 1:4)
plot(pca[[5]]$x[,c(1,2)], col =  cutree(group[[5]],4),
main="PC1 vs PC2 on TF-IDF")
dev.off()
# K-means
png("4_Analysis/Kmeans_Visual.png")
par(mfrow = c(1,1))
plot(pca[[5]]$x[,c(1,2)], col =  kfit[[5]],
main = "PC1 vs PC2 on TF-IDF (color: k-means clusters)")
dev.off()
#kmeans_fit[[5]]
# Silhouette information
png("4_Analysis/Silhouette_info.png")
par(mfrow = c(2,1))
plot(silhouette(cutree(group[[5]],4),d[[5]])[,3],
main="Silhouette hierarchical clustering", col=cutree(group[[5]],4))
plot(silhouette(kfit[[5]],d[[5]] )[,3], main = "Silhouette k-means",
col = kfit[[5]])
dev.off()
#mean(silhouette(cutree(group[[5]],4),d[[5]])[,3])
#mean(silhouette(kfit[[5]],d[[5]] )[,3])
png("4_Analysis/PCA_Visualization_TFIDF.png")
par(mfrow = c(1, 2))
plot(pca[[5]], type = "l",
main = paste0("Screeplot, 10% explained by first ", pca[[5]]$idx," PC"))
plot(pca[[5]]$x[,c(1,2)], col =  as.factor(rough_pcode),
main = "PC1 vs PC2 on TF-IDF")
dev.off()
rm(list = ls())
library(magrittr)
library(rvest)
library(httr)
totext = function(x){
# input x is a list containing text from the html files
xpathApply(x, "//body//text()", xmlValue)[[1]]
}
drc = POST("https://sfb649.wiwi.hu-berlin.de/fedc/discussionPapers_formular_content.php",
body = list(filterTypeName = "filterTypeName:AUTHORS",
filteryear = "all",
B1 = "Search"), encode = "form")
table_info = read_html(drc) %>%
html_nodes("body") %>%
html_nodes("tbody") %>%
html_nodes("tr") %>%
html_nodes("tr") %>%
html_nodes("table") %>%
`[`(4) %>%
html_table(header = NA, fill = T)
table_info = table_info[[1]]
table_info = table_info[-nrow(abstr_info), ]
table_info = table_info[-nrow(table_info), ]
colnames(table_info) = c("number", "title", "authors", "projectcode",
"date", "jel", "abstract", "download",
"quantlets", "empty")
cols = ncol(table_info)
table_info = table_info[, -((cols-3):cols)]
table_info = lapply(table_info, str_replace_all, "\r\n", "")
table_info$date = as.Date(table_info$date, format="%d.%m.%Y")
basename(getwd())
fromhere = paste0("https://sfb649.wiwi.hu-berlin.de/papers/pdf/SFB649DP",
table_info$number, ".pdf", sep = "")
setwd("2_pdf_to_txt")
if(!("PDFs" %in% list.files()) dir.create("PDFs")
setwd("PDFs")
# Download papers from all valid links, ignore invalid ones:
for(i in 1:length(fromhere)){
tryCatch({download.file(fromhere[i], paste0(numbers$number[i], ".pdf"))},
error = function(e){cat("ERROR: ", conditionMessage(e), "\n")})
}
setwd("2_pdf_to_txt")
if(!("PDFs" %in% list.files()){dir.create("PDFs")}
setwd("PDFs")
# Download papers from all valid links, ignore invalid ones:
for(i in 1:length(fromhere)){
tryCatch({download.file(fromhere[i], paste0(numbers$number[i], ".pdf"))},
error = function(e){cat("ERROR: ", conditionMessage(e), "\n")})
}
if(!("PDFs" %in% list.files())){dir.create("PDFs")}
setwd("PDFs")
str(fromhere)
for(i in 1:length(fromhere)){
tryCatch({download.file(fromhere[i], paste0(table_info$number[i], ".pdf"))},
error = function(e){cat("ERROR: ", conditionMessage(e), "\n")})
}
session.size <- function(top = 10){
sort( sapply( ls( envir = globalenv()), function(x){
format(object.size(get(x)), units = "Mb")
}
), decreasing = T)[1:top]
}
?file.choose
file.choose(new = T)
dir.choose()
file.choose()
file.choose()
setwd("2_pdf_txt")
getwd()
pdt2txt.path <- file.choose()
pdf2txt.path <- pdt2txt.path
rm(pdt2txt.path)
mypdfs = list.files(pattern = "*.pdf")
i <- mypdfs[1]
i
paste('"/Users/Ken/pdftotext"', paste0('"', i, '"'))
pdf2txt.path
test <- paste('"/Users/Ken/pdftotext"', paste0('"', i, '"'))
test
paste("\", pdf2txt.path)
)
paste("\\", pdf2txt.path)
paste('\"', pdf2txt.path)
paste0('\"', pdf2txt.path)
paste0('\"', pdf2txt.path), '\', paste0('"', i, '"'), sep = '\"')
paste0('\"', pdf2txt.path, '\', paste0('"', i, '"'), sep = '\"')
paste('\"', pdf2txt.path, '\', paste0('"', i, '"'), sep = '\"')
paste('\"', pdf2txt.path, '\\', paste0('"', i, '"'), sep = '\"')
paste('\"', pdf2txt.path, "\"", paste0('"', i, '"'), sep = '\"')
paste('\"', pdf2txt.path, "\"", paste0('"', i, '"'), sep = "")
paste('\"', pdf2txt.path, '\', paste0('"', i, '"'), sep = '\"')
paste('\"', pdf2txt.path, '\', paste0('"', i, '"'), sep = ' ')
paste('\"', pdf2txt.path, "\"", paste0(' "', i, '"'), sep = "")
"\"/Users/Ken/pdftotext\" \"2005-001.pdf\""
mypdfs = list.files(pattern = "*.pdf")
lapply(mypdfs, function(i){
system(paste('\"', pdf2txt.path, "\"", paste0(' "', i, '"'), sep = ""), wait = F)})
mytxts = list.files(pattern = "*.txt")
mypdfs = list.files(pattern = "*.pdf")
succesful.convert = (substr(mypdfs, 0, nchar(mypdfs)-4) %in% substr(mytxts, 0, nchar(mytxts)-4))
file.remove(mypdfs[!succesful.convert])
mypdfs = list.files(pattern = "*.pdf")
getwd()
basedir(getwd())
base.dir(getwd())
basename(getwd())
?basename
dirname(getwd())
dirname(dirname(getwd()))
setwd("03_txt_to_dataframes")
basepath = dirname(dirname(getwd()))
setwd(basepath)
setwd("03_txt_to_dataframes")
setwd("3_txt_to_dataframes")
getwd()
?dir.create
paste0(basepath, "3_txt_to_dataframes/txt")
old = "/Users/Ken/Q-Kolleg_Forked/2_pdf_to_txt/PDFs"
oldpath = "/Users/Ken/Q-Kolleg_Forked/2_pdf_to_txt/PDFs"
basepath = dirname(dirname(oldpath))
basepath
newpath = paste0(basepath, "/3_txt_to_dataframes/txt")
newpath
list.files(dirname(newpath)))
list.files(dirname(newpath))
getwd()
!("txt" %in% list.files(dirname(newpath)))
if(!("txt" %in% list.files(dirname(newpath)))){dir.create(newpath)}
?file.copy
mypdfs = list.files(pattern = "*.pdf")
mypdfs
mypdfs = list.files("PDFs", pattern = "*.pdf")
mypdfs
getwd()
setwd("PDFs")
oldpath
list.files(oldpath)
list.files(oldpath, pattern = "*.pdf")
dirname(list.files(oldpath, pattern = "*.pdf"))
list.files(oldpath, pattern = "*.pdf", full.names = T)
list.files(oldpath, pattern = "*.txt", full.names = T)
file.rename(fromhere, newpath)
mypdfs
mytxts
tohere = paste0(newpath, "/", mytxts)
fromhere = list.files(oldpath, pattern = "*.txt", full.names = T)
file.rename(fromhere, newpath)
file.rename(fromhere, tohere)
getwd()
setwd(basename(getwd()))
basename(getwd())
setwd(basename(getwd(), full.names = T))
dirname(getwd())
setwd(dirname(getwd()))
getwd()
list.files("3_txt_to_dataframes/txt", pattern = "*.txt", full.names = T)
mytxts = list.files("3_txt_to_dataframes/txt", pattern = "*.txt", full.names = T)
abstractlist = lapply(mytxts, function(textdoc){
paste0(scan(textdoc, what = character(), fileEncoding = "latin1"),  # or j =
collapse = " ")})
session.size()
rm(list = ls())
getwd()
mytxts = list.files("3_txt_to_dataframes/txt", pattern = "*.txt", full.names = T)
abstractlist = lapply(mytxts, function(textdoc){
paste0(scan(textdoc, what = character(), fileEncoding = "latin1"),  # or j =
collapse = " ")})
abstractlist[[1]]
sapply(abstractlist, is.null)
sum(sapply(abstractlist, is.null))
sum(sapply(abstractlist, file.size))
sum(sapply(abstractlist, function(x){nchar(x) < 10})
)
nchar(abstractlist[[1]])
length(mytxts)
library(tm)
corpus = Corpus(VectorSource(abstractlist))
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, removeWords, c(stopwords("english"),
"/f", "use", "can", "one", "will"))
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, stemDocument, "english")
# Create Document-Term-Matrix:
sparse_dtm = function(corpus, ...){
DocumentTermMatrix(corpus, control = list(...))
}
# Remove sparse terms:
small_dtm = function(corpus, threshold = 0.99, ...){
removeSparseTerms(sparse_dtm(corpus, ...), sparse = threshold)
}
TF = small_dtm(corpus, threshold = 0.995, weighting = weightTf)
save(TF, file = "4_Analysis/Articles_TFIDF.Rdata")
rm(list = ls())
getwd()
load(file = "4_Analysis/JEL_descr.Rdata")  # loads as JEL
load(file = "4_Analysis/Articles_TFIDF.Rdata") # loads as TF
load(file = "4_Analysis/abstract_infotable.Rdata")  # loads as
rm(JEL)
abstr_info <- abstr_info[[-`abstracts`]]
abstr_info <- abstr_info[-c(`abstracts`)]
ncol(abstr_info)
abstr_info <- abstr_info[[-c(length(abstr_info))]]
length(abstr_info)
abstr_info <- abstr_info[-c(length(abstr_info))]
abstr_info$jel
JELcats = sapply(abstr_info$jel, keep.letter)
keep.letter = function(x){gsub("[^[:alpha:]]", "", x)}
JELcats = sapply(abstr_info$jel, keep.letter)
JELcats
JELcats = sapply(tolower(JELcats), strsplit, split = "", fixed = T)
tab = table(unlist(JELcats))
k = length(tab[tab/sum(tab) > 0.01])
k
tab
load(file = "4_Analysis/JEL_descr.Rdata")  # loads as JEL
JEL
JEL$descr
tab > 6
tab < 8
tab < 10
sum(tab > 10)
sum(tab > 8)
sum(tab > 5)
sum(tab > 12)
sum(tab > 16)
tab[tab/sum(tab) > 0.1]
tab[tab/sum(tab) > 0.01]
which(tab[tab/sum(tab) > 0.01])
which(tab[tab/sum(tab) > 0.01] == T)
which(tab/sum(tab) > 0.01)
relevant.JELs = JEL$descr[which(tab/sum(tab) > 0.01)]
relevant.JELS
relevant.JELs
rm(list=ls())
library(topicmodels)
library(tm)
load(file = "4_Analysis/abstract_infotable.Rdata")  # loads as abstr_info
load(file = "4_Analysis/JEL_descr.Rdata")  # loads as JEL
load(file = "4_Analysis/Articles_TFIDF.Rdata") # loads as TF
########################################################################
### 0. Functions for this script
### 1. Determine the number of topics to extracts for LDA
### 2. Run & analyse the output
########################################################################
#### 0. Functions for this script                                  #####
keep.letter = function(x){gsub("[^[:alpha:]]", "", x)}
#### 1. Determine the number of topics to extract for LDA
## Note that, as more articles become availabe, this restriction
## be removed. Currently, the LDA cannot identify some topics,
## since they are simply not present in the training set.
abstr_info = abstr_info[-c(length(abstr_info))]
JELcats = sapply(abstr_info$jel, keep.letter)
JELcats = sapply(tolower(JELcats), strsplit, split = "", fixed = T)
tab = table(unlist(JELcats))
k = length(tab[tab/sum(tab) > 0.01])
relevant.JELs = JEL$descr[which(tab/sum(tab) > 0.01)]
#### 2. Run & analyse the output                                   #####
# Running LDA for k topics
lda.output = LDA(TF, k = k, method = "Gibbs")
# Overview of allocation of topics and terms per topic
lda.topics = as.matrix(topics(lda.output))
lda.terms = as.matrix(terms(lda.output, 10))
# Number of documents assigned to every topic, decreasing order:
table(lda.topics)[order(table(lda.topics), decreasing = T)]
# Find the topics that the descriptions will be assigned to by LDA:
JEL.posterior = posterior(lda.output,
DocumentTermMatrix(Corpus(VectorSource(JEL$descr))))
JEL.posterior.relevant = posterior(lda.output,
DocumentTermMatrix(Corpus(VectorSource(relevant.JELs))))
JEL.topics = apply(JEL.posterior$topics, 1, which.max)
JEL.topics.relevant = apply(JEL.posterior.relevant$topics, 1, which.max)
# Create nice overview:
names(JEL.topics) = dict$description
names(JEL.topics.relevant) = smalldict$description
JEL.topics.relevant
JEL$descr
JEL$code
relevant.JELs
save(lda.output, "4_Analysis/lda_output.Rdata")
getwd()
save(lda.output, file = "4_Analysis/lda_output.Rdata")
load("04_Analysis/lda_output.Rdata")
getwd()
setwd("/Users/Ken/Q-Kolleg_Forked")
load("04_Analysis/lda_output.Rdata")
library(devtools)
devtools::install_github("lborke/yamldebugger")
# load the package every time you want to use 'yamldebugger'
library(yamldebugger)
allKeywords
"plot" %in% allKeywords
workdir <-
getwd()
getwd()
workdir <- paste0(getwd(), "/01_Scraping")
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
d_init$RootPath
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
list.files(init$RootPath)
list.files(d_init$RootPath)
qnames = sapply(list.files(d_init$RootPath, full_names = T), yaml.debugger.get.qnames)
qnames = sapply(list.files(d_init$RootPath, full.names = T), yaml.debugger.get.qnames)
list.files(d_init$RootPath, full.names = T)
?yaml.debugger.init
workdir
workdir <- paste0(getwd())
workdir
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = sapply(list.files(d_init$RootPath, full.names = T), yaml.debugger.get.qnames)
d_init$RootPath
yaml.debugger.init
yaml.debugger.get.qnames
list.dir(workdir)
list.dirs(workdir)
RootPath = workdir
listofQl = list.dirs(RootPath, full.names = FALSE, recursive = FALSE)
listofQl
listofQl[grepl(pattern_qfolders, listofQl, ignore.case = TRUE)]
pattern_qfolders = "[^\b|\\.git]"
listofQl = listofQl[grepl(pattern_qfolders, listofQl, ignore.case = TRUE)]
listofQL
listofQl
!grepl("[[:blank:]]+", listofQl, ignore.case = TRUE)
RootPath
RootPath <- paste0(RootPath, "/01_Scraping")
list.dirs(RootPath, full.names = FALSE, recursive = FALSE)
RootPath
listofQl = list.dirs(RootPath, full.names = FALSE, recursive = FALSE)
listofQl
RoothPath
RootPath
RootPath <- "/Users/Ken/Q-Kolleg_Forked"
listofQl = list.dirs(RootPath, full.names = FALSE, recursive = FALSE)
listofQl
listofQl = listofQl[grepl(pattern_qfolders, listofQl, ignore.case = TRUE)]
listofQl
!grepl("[[:blank:]]+", listofQl, ignore.case = TRUE)
listofQl = list.dirs(RootPath, full.names = FALSE, recursive = FALSE)
listofQl = listofQl[grepl(pattern_qfolders, listofQl, ignore.case = TRUE)]
listofQl_ok = listofQl[!grepl("[[:blank:]]+", listofQl, ignore.case = TRUE)]
listofQl_bad = listofQl[grepl("[[:blank:]]+", listofQl, ignore.case = TRUE)]
if (show_qnames) {
print(paste(length(listofQl_ok), "Q folder(s) found:"))
print(listofQl_ok)
}
if (length(listofQl_bad) > 0) {
print(paste(length(listofQl_bad), "skipped Q folder(s) with blanks:"))
print(listofQl_bad)
print("The skipped Q folders need to be renamed! Otherwise no debugging is possible and no Style guide compliance!")
}
listofQl_ok
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = sapply(list.files(d_init$RootPath, full.names = T), yaml.debugger.get.qnames)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
OverView = yaml.debugger.summary(qnames, d_results, summaryType = "mini")
install.packages("formatR")
library(formatR)
tidy_source(file = "Abstract_scraping2.R")
getwd()
d_results
workdir <- paste0(getwd())
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
setwd(dirname(getwd()))
dirname(getwd)
dirname(getwd())
getwd()
setwd("Q-Kolleg_YAML")
workdir <- getwd()
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
list.files()
?list.files
list.files(pattern = "*.R", recursive = T)
list.files(pattern = "*.R^.Rdata", recursive = T)
list.files(pattern = "[[*.R]][[^.*Rdata]]", recursive = T)
file.remove("Abstract_scraping2.R")
list.files(pattern = "*.R^", recursive = T)
list.files(pattern = "*.R", recursive = T)
oldnames <-  list.files(pattern = "*.R", recursive = T)
grepl("*.Rdata", oldnames)
oldnames <-  list.files(pattern = "*.R", recursive = T)
oldnames <- oldnames[!grepl("*.Rdata", oldnames)]
oldnames
newnames <- paste0(substr(oldnames, nchar(oldnames-2), nchar(oldnames)), "_2.R")
substr(oldnames, nchar(oldnames-2), nchar(oldnames))
substr(oldnames, nchar(oldnames)-2, nchar(oldnames))
newnames <- paste0(substr(oldnames, 1, nchar(oldnames-1)), "_2.R")
newnames <- paste0(substr(oldnames, 1, nchar(oldnames)-1), "_2.R")
newnames
newnames <- paste0(substr(oldnames, 1, nchar(oldnames)-2), "_2.R")
newnames
tidy_source(source = oldnames, file = newnames)
oldnames
newnames
for(i in 1:length(oldnames)){
tidy_source(source = oldnames[i], file = newnames[i]9)
}
for(i in 1:length(oldnames)){
tidy_source(source = oldnames[i], file = newnames[i])
}
getwd()
file.remove(oldnames)
workdir
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
OverView = yaml.debugger.summary(qnames, d_results, summaryType = "mini")
getwd()
list.functions.in.file(paste0(getwd(), "/01_Scraping/Abstract_scraping_2.R"))
library(NCmisc)
install.packages("NCmisc")
library(NCmisc)
list.functions.in.file(paste0(getwd(), "/01_Scraping/Abstract_scraping_2.R"))
getwd()
setwd("/01_Scraping")
list.dirs()
setwd("./01_Scraping")
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
OverView = yaml.debugger.summary(qnames, d_results, summaryType = "mini")
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
OverView = yaml.debugger.summary(qnames, d_results, summaryType = "mini")
getwd()
list.files()
workdir <- getwd()
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
setwd(dirname("./01_Scraping"))
getwd8)
getwd()
setwd("/Users/Ken/Q-Kolleg")
workdir <- getwd()
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
OverView = yaml.debugger.summary(qnames, d_results, summaryType = "mini")
getwd()
workdir <- getwd()
getwd()
workdir <- getwd()
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
OverView = yaml.debugger.summary(qnames, d_results, summaryType = "mini")
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
OverView = yaml.debugger.summary(qnames, d_results, summaryType = "mini")
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
OverView = yaml.debugger.summary(qnames, d_results, summaryType = "mini")
